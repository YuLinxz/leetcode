//给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
//你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
//返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。

//示例1
//输入：[7, 1, 5, 3, 6, 4]
//输出：5
//解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6 - 1 = 5 。
//注意利润不能是 7 - 1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
// 
//示例2
//输入：prices = [7, 6, 4, 3, 1]
//输出：0
//解释：在这种情况下, 没有交易完成, 所以最大利润为 0。

#include<iostream>
#include<vector>
#include<algorithm>
#include<climits>

using namespace std;

//暴力解法
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int MAX = 0;
        int dif = 0;
        for (int i = 0; i < prices.size() - 1; i++) {
            for (int j = i + 1; j < prices.size(); j++) {
                if (prices[j] > prices[i]) {
                    dif = prices[j] - prices[i];
                    MAX = MAX > dif ? MAX : dif;
                }
            }
        }
        return MAX;

    }
};


//最低点买入最高点卖出原则
class Solution2 {
public:
    int maxProfit(vector<int>& prices) {
        int MAX = 0;
        int dif = 0;
        int MINPrice = INT_MAX;
        for (int i = 0; i < prices.size()-1 ; i++) {
            if (prices[i] < MINPrice) {
                MINPrice = prices[i];
            }
            if (prices[i] > MINPrice) {
                dif = prices[i] - MINPrice;
                MAX = MAX > dif ? MAX : dif;
            }
        }
        return MAX;

    }
};


int main()
{
    vector<int> nums1{7,1,5,3,6,4};
    int v;
    Solution2 s;
    v = s.maxProfit(nums1);
    cout << v << endl;
    return 0;
}
